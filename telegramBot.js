const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const CardPaginationManager = require('./cardPaginationManager');

class TelegramGameBot {
    constructor() {
        // ‡πÑ‡∏°‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å .env ‡∏≠‡∏µ‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ - ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å UI
        this.token = null;
        this.channelId = null; // ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠ backward compatibility
        this.channelIds = []; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ä‡πÅ‡∏ô‡∏•
        this.playNowUrl = 'https://t.me/UFAthai_ubot'; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        
        this.bot = null;
        this.callbackHandlersSetup = false; // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£ setup handlers ‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á pagination manager ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏´‡∏•‡∏≤‡∏¢‡πÉ‡∏ö
        this.paginationManager = new CardPaginationManager();
        
        console.log('ü§ñ TelegramGameBot created (waiting for credentials from UI)');
    }

    initializeBot() {
        if (!this.token) {
            throw new Error('Bot Token is required. Please set credentials first.');
        }
        
        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ bot ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î polling ‡∏Å‡πà‡∏≠‡∏ô
        if (this.bot) {
            try {
                if (this.bot.isPolling()) {
                    this.bot.stopPolling();
                }
            } catch (error) {
                // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£ ‡∏ñ‡πâ‡∏≤ polling ‡∏´‡∏¢‡∏∏‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
            }
        }
        
        this.bot = new TelegramBot(this.token, { polling: false });
        this.callbackHandlersSetup = false; // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï flag
        console.log(`ü§ñ Bot initialized with token: ${this.token.substring(0, 10)}...`);
    }

    setBotCredentials(botToken, channelId, playNowUrl = null) {
        if (!botToken || !channelId) {
            throw new Error('Bot Token and Channel ID are required');
        }
        
        this.token = botToken;
        
        // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏ä‡πÅ‡∏ô‡∏•‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ä‡πÅ‡∏ô‡∏•
        if (Array.isArray(channelId)) {
            this.channelIds = channelId;
            this.channelId = channelId[0]; // ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏ä‡πÅ‡∏ô‡∏•‡πÅ‡∏£‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠ backward compatibility
        } else if (typeof channelId === 'string') {
            // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÅ‡∏ä‡πÅ‡∏ô‡∏•‡πÅ‡∏ö‡∏ö string ‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢ comma ‡∏´‡∏£‡∏∑‡∏≠ newline
            const channels = channelId
                .split(/[,\n]/) // ‡πÅ‡∏¢‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏ó‡∏±‡πâ‡∏á comma ‡πÅ‡∏•‡∏∞ newline
                .map(id => id.trim())
                .filter(id => id.length > 0);
                
            this.channelIds = channels;
            this.channelId = this.channelIds[0];
        } else {
            this.channelIds = [channelId];
            this.channelId = channelId;
        }
        
        if (playNowUrl) {
            this.playNowUrl = playNowUrl;
        }
        
        this.initializeBot();
        
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ callback handlers ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        if (!this.callbackHandlersSetup) {
            this.setupCallbackHandlers();
            this.callbackHandlersSetup = true;
        }
        
        console.log(`üîß Bot credentials updated:`);
        console.log(`   Channels (${this.channelIds.length}):`, this.channelIds);
        console.log(`üîó Play now URL: ${this.playNowUrl}`);
    }

    isConfigured() {
        return !!(this.token && this.channelId && this.bot);
    }

    async sendGameCard(cardImagePath, gameData) {
        try {
            if (!this.bot) {
                throw new Error('Bot not initialized. Please set bot credentials first.');
            }
            
            if (!this.channelId) {
                throw new Error('Channel ID not set. Please set channel ID first.');
            }

            // ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
            const cardBuffer = fs.readFileSync(cardImagePath);
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ
            const caption = this.generateCaption(gameData);
            
            // ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡πÑ‡∏õ‡∏¢‡∏±‡∏á channel (‡πÅ‡∏ä‡πÅ‡∏ô‡∏•‡πÄ‡∏î‡∏µ‡∏¢‡∏ß - backward compatibility)
            const result = await this.bot.sendPhoto(this.channelId, cardBuffer, {
                caption: caption,
                parse_mode: 'HTML'
            });
            
            console.log(`‚úÖ Game card sent successfully to ${this.channelId}`);
            console.log(`Message ID: ${result.message_id}`);
            
            return result;
            
        } catch (error) {
            console.error('‚ùå Error sending game card:', error.message);
            throw error;
        }
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ä‡πÅ‡∏ô‡∏•
    async sendGameCardToAllChannels(cardImagePath, gameData) {
        try {
            if (!this.bot) {
                throw new Error('Bot not initialized. Please set bot credentials first.');
            }
            
            if (!this.channelIds || this.channelIds.length === 0) {
                throw new Error('No channels configured. Please set channel IDs first.');
            }

            // ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
            const cardBuffer = fs.readFileSync(cardImagePath);
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ
            const caption = this.generateCaption(gameData);
            
            const results = [];
            
            // ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏ó‡∏∏‡∏Å‡πÅ‡∏ä‡πÅ‡∏ô‡∏•
            for (let i = 0; i < this.channelIds.length; i++) {
                const channelId = this.channelIds[i];
                
                try {
                    const result = await this.bot.sendPhoto(channelId, cardBuffer, {
                        caption: caption,
                        parse_mode: 'HTML'
                    });
                    
                    console.log(`‚úÖ Game card sent successfully to channel ${i + 1}/${this.channelIds.length}: ${channelId}`);
                    console.log(`   Message ID: ${result.message_id}`);
                    
                    results.push({
                        channelId,
                        success: true,
                        messageId: result.message_id,
                        result
                    });
                    
                    // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô rate limit
                    if (i < this.channelIds.length - 1) {
                        await new Promise(resolve => setTimeout(resolve, 1000));
                    }
                    
                } catch (channelError) {
                    console.error(`‚ùå Failed to send to channel ${channelId}:`, channelError.message);
                    results.push({
                        channelId,
                        success: false,
                        error: channelError.message
                    });
                }
            }
            
            const successCount = results.filter(r => r.success).length;
            console.log(`üìä Send summary: ${successCount}/${this.channelIds.length} channels successful`);
            
            return {
                totalChannels: this.channelIds.length,
                successCount,
                results
            };
            
        } catch (error) {
            console.error('‚ùå Error sending game card to all channels:', error.message);
            throw error;
        }
    }

    async sendGameCardWithKeyboard(cardImagePath, gameData) {
        try {
            // ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
            const cardBuffer = fs.readFileSync(cardImagePath);
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ
            const caption = this.generateCaption(gameData);
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á Inline Keyboard ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏° (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
            const keyboard = {
                inline_keyboard: [[
                    {
                        text: '‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏•‡∏¢‚ñ∂Ô∏è',
                        url: this.playNowUrl
                    }
                ]]
            };
            
            // ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡πÑ‡∏õ‡∏¢‡∏±‡∏á channel ‡∏û‡∏£‡πâ‡∏≠‡∏° keyboard
            const result = await this.bot.sendPhoto(this.channelId, cardBuffer, {
                caption: caption,
                parse_mode: 'HTML',
                reply_markup: keyboard
            });
            
            console.log(`‚úÖ Game card with keyboard sent successfully to ${this.channelId}`);
            console.log(`Message ID: ${result.message_id}`);
            
            return result;
            
        } catch (error) {
            console.error('‚ùå Error sending game card with keyboard:', error.message);
            throw error;
        }
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ä‡πÅ‡∏ô‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏° keyboard
    async sendGameCardWithKeyboardToAllChannels(cardImagePath, gameData) {
        try {
            if (!this.bot) {
                throw new Error('Bot not initialized. Please set bot credentials first.');
            }
            
            if (!this.channelIds || this.channelIds.length === 0) {
                throw new Error('No channels configured. Please set channel IDs first.');
            }

            // ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
            const cardBuffer = fs.readFileSync(cardImagePath);
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ
            const caption = this.generateCaption(gameData);
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á Inline Keyboard
            const keyboard = {
                inline_keyboard: [[
                    {
                        text: '‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏•‡∏¢‚ñ∂Ô∏è',
                        url: this.playNowUrl
                    }
                ]]
            };
            
            const results = [];
            
            // ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏ó‡∏∏‡∏Å‡πÅ‡∏ä‡πÅ‡∏ô‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏° keyboard
            for (let i = 0; i < this.channelIds.length; i++) {
                const channelId = this.channelIds[i];
                
                try {
                    const result = await this.bot.sendPhoto(channelId, cardBuffer, {
                        caption: caption,
                        parse_mode: 'HTML',
                        reply_markup: keyboard
                    });
                    
                    console.log(`‚úÖ Game card with keyboard sent successfully to channel ${i + 1}/${this.channelIds.length}: ${channelId}`);
                    console.log(`   Message ID: ${result.message_id}`);
                    
                    results.push({
                        channelId,
                        success: true,
                        messageId: result.message_id,
                        result
                    });
                    
                    // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô rate limit
                    if (i < this.channelIds.length - 1) {
                        await new Promise(resolve => setTimeout(resolve, 1000));
                    }
                    
                } catch (channelError) {
                    console.error(`‚ùå Failed to send to channel ${channelId}:`, channelError.message);
                    results.push({
                        channelId,
                        success: false,
                        error: channelError.message
                    });
                }
            }
            
            const successCount = results.filter(r => r.success).length;
            console.log(`üìä Send summary: ${successCount}/${this.channelIds.length} channels successful`);
            
            return {
                totalChannels: this.channelIds.length,
                successCount,
                results
            };
            
        } catch (error) {
            console.error('‚ùå Error sending game card with keyboard to all channels:', error.message);
            throw error;
        }
    }

    async sendMultipleCardsWithPagination(cardsData) {
        try {
            if (!cardsData || cardsData.length === 0) {
                throw new Error('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á');
            }

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á session ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏´‡∏•‡∏≤‡∏¢‡πÉ‡∏ö
            const sessionId = this.paginationManager.createSession(cardsData);
            
            // ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÉ‡∏ö‡πÅ‡∏£‡∏Å
            const firstCardData = this.paginationManager.getCurrentCard(sessionId);
            if (!firstCardData) {
                throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÑ‡∏î‡πâ');
            }

            // ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏£‡∏Å
            const cardBuffer = fs.readFileSync(firstCardData.card.imagePath);
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏£‡∏Å
            const caption = this.generateCaptionWithPagination(firstCardData.card, firstCardData.currentPage, firstCardData.totalPages);
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á keyboard ‡∏û‡∏£‡πâ‡∏≠‡∏° pagination
            const keyboard = this.paginationManager.createPaginationKeyboard(sessionId, this.playNowUrl);
            
            // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏£‡∏Å‡∏û‡∏£‡πâ‡∏≠‡∏° pagination buttons
            const result = await this.bot.sendPhoto(this.channelId, cardBuffer, {
                caption: caption,
                parse_mode: 'HTML',
                reply_markup: keyboard
            });
            
            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å message ID ‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
            this.paginationManager.setMessageId(sessionId, result.message_id);
            
            console.log(`‚úÖ Multiple cards with pagination sent successfully to ${this.channelId}`);
            console.log(`Message ID: ${result.message_id}, Session: ${sessionId}`);
            console.log(`Total cards: ${cardsData.length}, Current: 1/${cardsData.length}`);
            
            return {
                ...result,
                sessionId: sessionId,
                totalCards: cardsData.length
            };
            
        } catch (error) {
            console.error('‚ùå Error sending multiple cards with pagination:', error.message);
            throw error;
        }
    }

    generateCaption(gameData) {
        return `üéÆ <b>${gameData.name}</b>

üéØ <b>RTP:</b> ${gameData.rtp}%
üí∞ <b>‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏ä‡∏ô‡∏∞‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î:</b> ${gameData.maxWin}
üü¢ <b>‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå:</b> ${gameData.players} ‡∏Ñ‡∏ô
üìä <b>‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏ä‡∏ô‡∏∞:</b> ${gameData.winRate}%
üè∑Ô∏è <b>‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£:</b> ${gameData.provider}

${gameData.isNew ? 'üî• <b>‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà!</b>' : ''}

#SlotGame #PG #Casino #OnlineGaming`;
    }

    generateCaptionWithPagination(gameData, currentPage, totalPages) {
        return `üéÆ <b>${gameData.name}</b> [${currentPage}/${totalPages}]

üéØ <b>RTP:</b> ${gameData.rtp}%
üí∞ <b>‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏ä‡∏ô‡∏∞‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î:</b> ${gameData.maxWin}
üü¢ <b>‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå:</b> ${gameData.players} ‡∏Ñ‡∏ô
üìä <b>‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏ä‡∏ô‡∏∞:</b> ${gameData.winRate}%
üè∑Ô∏è <b>‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£:</b> ${gameData.provider}

${gameData.isNew ? 'üî• <b>‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà!</b>' : ''}

üëàüëâ <b>‡πÉ‡∏ä‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏î‡∏π‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏≠‡∏∑‡πà‡∏ô</b>

#SlotGame #PG #Casino #OnlineGaming`;
    }

    async sendTextMessage(message) {
        try {
            if (!this.bot) {
                throw new Error('Bot not initialized. Please set bot credentials first.');
            }
            
            if (!this.channelId) {
                throw new Error('Channel ID not set. Please set channel ID first.');
            }

            const result = await this.bot.sendMessage(this.channelId, message, {
                parse_mode: 'HTML'
            });
            
            console.log(`‚úÖ Text message sent successfully to ${this.channelId}`);
            return result;
            
        } catch (error) {
            console.error('‚ùå Error sending text message:', error.message);
            throw error;
        }
    }

    async sendTextMessageToAllChannels(message) {
        try {
            if (!this.bot) {
                throw new Error('Bot not initialized. Please set bot credentials first.');
            }
            
            if (!this.channelIds || this.channelIds.length === 0) {
                throw new Error('No channels configured. Please set channel IDs first.');
            }

            const results = [];
            
            // ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏ó‡∏∏‡∏Å‡πÅ‡∏ä‡πÅ‡∏ô‡∏•
            for (let i = 0; i < this.channelIds.length; i++) {
                const channelId = this.channelIds[i];
                
                try {
                    const result = await this.bot.sendMessage(channelId, message, {
                        parse_mode: 'HTML'
                    });
                    
                    console.log(`‚úÖ Text message sent successfully to channel ${i + 1}/${this.channelIds.length}: ${channelId}`);
                    console.log(`   Message ID: ${result.message_id}`);
                    
                    results.push({
                        channelId,
                        success: true,
                        messageId: result.message_id,
                        result
                    });
                    
                    // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô rate limit
                    if (i < this.channelIds.length - 1) {
                        await new Promise(resolve => setTimeout(resolve, 1000));
                    }
                    
                } catch (channelError) {
                    console.error(`‚ùå Failed to send text message to channel ${channelId}:`, channelError.message);
                    results.push({
                        channelId,
                        success: false,
                        error: channelError.message
                    });
                }
            }
            
            const successCount = results.filter(r => r.success).length;
            console.log(`üìä Text message summary: ${successCount}/${this.channelIds.length} channels successful`);
            
            return {
                totalChannels: this.channelIds.length,
                successCount,
                results
            };
            
        } catch (error) {
            console.error('‚ùå Error sending text message to all channels:', error.message);
            throw error;
        }
    }

    async testConnection() {
        try {
            if (!this.bot) {
                throw new Error('Bot not initialized. Please set bot credentials first.');
            }
            
            if (!this.channelIds || this.channelIds.length === 0) {
                throw new Error('Channel ID not set. Please set channel ID first.');
            }

            const me = await this.bot.getMe();
            console.log(`‚úÖ Bot connected successfully: @${me.username}`);
            console.log(`üîç Testing connection to ${this.channelIds.length} channel(s)...`);
            
            // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏ó‡∏∏‡∏Å‡πÅ‡∏ä‡πÅ‡∏ô‡∏•
            const results = [];
            for (let i = 0; i < this.channelIds.length; i++) {
                const channelId = this.channelIds[i];
                try {
                    const result = await this.bot.sendMessage(channelId, 'ü§ñ Bot connected and ready to send game cards!');
                    console.log(`‚úÖ Test message sent to channel ${i + 1}/${this.channelIds.length}: ${channelId} (Message ID: ${result.message_id})`);
                    results.push({
                        channelId,
                        success: true,
                        messageId: result.message_id
                    });
                } catch (error) {
                    console.error(`‚ùå Failed to send test message to ${channelId}:`, error.message);
                    results.push({
                        channelId,
                        success: false,
                        error: error.message
                    });
                }
                
                // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á
                if (i < this.channelIds.length - 1) {
                    await new Promise(resolve => setTimeout(resolve, 1000));
                }
            }
            
            const successCount = results.filter(r => r.success).length;
            console.log(`üìä Connection test summary: ${successCount}/${this.channelIds.length} channels accessible`);
            
            return {
                success: successCount > 0,
                totalChannels: this.channelIds.length,
                successCount,
                results
            };
            
        } catch (error) {
            console.error('‚ùå Bot connection test failed:', error.message);
            return {
                success: false,
                error: error.message
            };
        }
    }

    async sendMultipleCards(cardsData) {
        const results = [];
        
        for (let i = 0; i < cardsData.length; i++) {
            try {
                const result = await this.sendGameCard(cardsData[i].imagePath, cardsData[i]);
                results.push({ success: true, result });
                
                // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ spam
                if (i < cardsData.length - 1) {
                    await new Promise(resolve => setTimeout(resolve, 2000));
                }
                
            } catch (error) {
                results.push({ success: false, error: error.message });
            }
        }
        
        return results;
    }

    setupCallbackHandlers() {
        if (!this.bot) {
            console.log('‚ö†Ô∏è Bot not initialized, skipping callback handler setup');
            return;
        }

        // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ callback query ‡∏à‡∏≤‡∏Å‡∏õ‡∏∏‡πà‡∏° pagination
        this.bot.on('callback_query', async (callbackQuery) => {
            try {
                const chatId = callbackQuery.message.chat.id;
                const messageId = callbackQuery.message.message_id;
                const callbackData = callbackQuery.data;
                
                console.log(`üì± Received callback: ${callbackData}`);
                
                // ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö callback query ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î loading
                await this.bot.answerCallbackQuery(callbackQuery.id);
                
                // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏Ç‡∏≠
                const result = this.paginationManager.processCallback(callbackData);
                
                if (!result) {
                    console.log('‚ùå Invalid callback data:', callbackData);
                    return;
                }

                switch (result.type) {
                    case 'navigate':
                        await this.handleNavigate(callbackQuery, result);
                        break;
                        
                    case 'info':
                        await this.handleInfo(callbackQuery, result);
                        break;
                        
                    case 'noop':
                        console.log('üí§ No-op callback');
                        break;
                }
                
            } catch (error) {
                console.error('‚ùå Error handling callback query:', error);
                try {
                    await this.bot.answerCallbackQuery(callbackQuery.id, {
                        text: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'
                    });
                } catch (answerError) {
                    console.error('‚ùå Error answering callback query:', answerError);
                }
            }
        });
    }

    async handleNavigate(callbackQuery, result) {
        if (!result.newData) {
            console.log('‚ùå No navigation data available');
            return;
        }

        try {
            const chatId = callbackQuery.message.chat.id;
            const messageId = callbackQuery.message.message_id;
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
            if (!fs.existsSync(result.newData.card.imagePath)) {
                console.error('‚ùå Image file not found:', result.newData.card.imagePath);
                return;
            }
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
            const newCaption = this.generateCaptionWithPagination(
                result.newData.card, 
                result.newData.currentPage, 
                result.newData.totalPages
            );
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á keyboard ‡πÉ‡∏´‡∏°‡πà
            const newKeyboard = this.paginationManager.createPaginationKeyboard(result.sessionId, this.playNowUrl);
            
            console.log(`üîÑ Navigating to page ${result.newData.currentPage}/${result.newData.totalPages}`);
            
            // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô (‡πÑ‡∏°‡πà throw error ‡∏´‡∏≤‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß)
            try {
                await this.bot.deleteMessage(chatId, messageId);
            } catch (deleteError) {
                console.log('‚ö†Ô∏è Could not delete old message, continuing...');
            }
            
            // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
            await new Promise(resolve => setTimeout(resolve, 500));
            
            // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà
            await this.bot.sendPhoto(chatId, result.newData.card.imagePath, {
                caption: newCaption,
                parse_mode: 'HTML',
                reply_markup: newKeyboard
            });
            
            console.log(`‚úÖ Successfully navigated to page ${result.newData.currentPage}/${result.newData.totalPages}`);
            
        } catch (error) {
            console.error('‚ùå Error navigating page:', error);
            // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö callback query ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ï‡∏≠‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
        }
    }

    async handleInfo(callbackQuery, result) {
        if (!result.data) {
            console.log('‚ùå No info data available');
            return;
        }

        try {
            // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô alert (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö callback query ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°)
            await this.bot.answerCallbackQuery(callbackQuery.id, {
                text: `üìä ${result.data.card.name}\n‡∏´‡∏ô‡πâ‡∏≤ ${result.data.currentPage} ‡∏à‡∏≤‡∏Å ${result.data.totalPages} ‡∏Å‡∏≤‡∏£‡πå‡∏î`,
                show_alert: true
            });
        } catch (error) {
            console.error('‚ùå Error showing info:', error);
        }
    }

    // ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô polling ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö callback queries
    startPolling() {
        if (!this.bot) {
            console.log('‚ö†Ô∏è Bot not initialized, cannot start polling');
            return;
        }
        
        if (!this.bot.isPolling()) {
            try {
                this.bot.startPolling();
                console.log('üîÑ Started polling for callback queries');
            } catch (error) {
                console.error('‚ùå Error starting polling:', error.message);
                // ‡∏•‡∏≠‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏° polling ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                setTimeout(() => {
                    if (!this.bot.isPolling()) {
                        try {
                            this.bot.startPolling();
                            console.log('üîÑ Retry: Started polling for callback queries');
                        } catch (retryError) {
                            console.error('‚ùå Retry failed:', retryError.message);
                        }
                    }
                }, 2000);
            }
        } else {
            console.log('‚ö†Ô∏è Polling already started');
        }
    }

    // ‡∏´‡∏¢‡∏∏‡∏î polling
    stopPolling() {
        if (this.bot && this.bot.isPolling()) {
            try {
                this.bot.stopPolling();
                console.log('üõë Stopped polling');
            } catch (error) {
                console.error('‚ùå Error stopping polling:', error.message);
            }
        }
    }
}

module.exports = TelegramGameBot;