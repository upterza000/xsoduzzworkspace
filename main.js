const ImageSelector = require('./imageSelector');
const GameCardGenerator = require('./gameCardGenerator');
const TelegramGameBot = require('./telegramBot');
const path = require('path');
const fs = require('fs');

class RichGameCardSystem {
    constructor() {
        this.imageSelector = new ImageSelector('./game_assets');
        this.cardGenerator = new GameCardGenerator();
        this.telegramBot = new TelegramGameBot(); // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ credentials
        this.outputDir = './generated_cards';
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
        if (!fs.existsSync(this.outputDir)) {
            fs.mkdirSync(this.outputDir);
        }
        
        console.log('üéÆ RichGameCardSystem created (waiting for credentials)');
    }

    async generateAndSendSingleCard() {
        try {
            console.log('üéÆ Starting Rich Game Card Generator...');
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Telegram Bot ‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (!this.telegramBot.isConfigured()) {
                throw new Error('Telegram Bot not configured. Please set credentials first.');
            }
            
            // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
            const selectedImage = this.imageSelector.getRandomImage();
            console.log(`üì∏ Selected image: ${selectedImage.filename}`);
            console.log(`üéØ Game name: ${selectedImage.name}`);
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°
            const gameData = this.cardGenerator.generateRandomGameData(
                selectedImage.fullPath, 
                selectedImage.name
            );
            
            console.log('üìä Generated game data:', {
                name: gameData.name,
                rtp: gameData.rtp,
                maxWin: gameData.maxWin,
                players: gameData.players,
                isNew: gameData.isNew
            });
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î
            console.log('üé® Generating game card...');
            const screenshotBuffer = await this.cardGenerator.generateCard(gameData);
            
            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πå‡∏î
            const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
            const cardFilename = path.join(this.outputDir, `game_card_${timestamp}.png`);
            await this.cardGenerator.saveCard(screenshotBuffer, cardFilename);
            
            console.log(`üíæ Card saved: ${cardFilename}`);
            
            // ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Telegram
            console.log('üì± Sending to Telegram channel...');
            await this.telegramBot.sendGameCard(cardFilename, gameData);
            
            console.log('‚úÖ Process completed successfully!');
            
            return {
                success: true,
                cardPath: cardFilename,
                gameData: gameData
            };
            
        } catch (error) {
            console.error('‚ùå Error in generateAndSendSingleCard:', error.message);
            throw error;
        }
    }

    async generateAndSendMultipleCards(count = 5) {
        try {
            console.log(`üéÆ Generating ${count} game cards...`);
            
            const results = [];
            
            for (let i = 0; i < count; i++) {
                console.log(`\n--- Card ${i + 1}/${count} ---`);
                
                try {
                    const result = await this.generateAndSendSingleCard();
                    results.push(result);
                    
                    // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á
                    if (i < count - 1) {
                        console.log('‚è≥ Waiting 3 seconds before next card...');
                        await new Promise(resolve => setTimeout(resolve, 3000));
                    }
                    
                } catch (error) {
                    console.error(`‚ùå Error generating card ${i + 1}:`, error.message);
                    results.push({
                        success: false,
                        error: error.message
                    });
                }
            }
            
            console.log(`\nüìä Summary: ${results.filter(r => r.success).length}/${count} cards sent successfully`);
            return results;
            
        } catch (error) {
            console.error('‚ùå Error in generateAndSendMultipleCards:', error.message);
            throw error;
        }
    }

    async testSystem() {
        try {
            console.log('üîß Testing Rich Game Card System...');
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Telegram Bot ‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (!this.telegramBot.isConfigured()) {
                console.log('‚ö†Ô∏è Telegram Bot not configured yet');
                throw new Error('Telegram Bot not configured. Please set credentials first.');
            }
            
            // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Telegram
            console.log('üì± Testing Telegram connection...');
            const telegramOk = await this.telegramBot.testConnection();
            
            if (!telegramOk) {
                throw new Error('Telegram connection failed');
            }
            
            // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
            console.log('üì∏ Testing image loading...');
            const images = this.imageSelector.getAllImages();
            console.log(`Found ${images.length} images`);
            
            if (images.length === 0) {
                console.log('‚ö†Ô∏è No images found in the game_assets folder');
                // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
            } else {
                console.log('Sample images:');
                images.slice(0, 5).forEach(img => {
                    console.log(`  - ${img.filename} (${img.name})`);
                });
            }
            
            console.log('‚úÖ System test completed successfully!');
            return true;
            
        } catch (error) {
            console.error('‚ùå System test failed:', error.message);
            return false;
        }
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏™‡∏∏‡πà‡∏°‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏™‡πà‡∏á Telegram
    async generateRandomCard() {
        try {
            console.log('üé≤ Generating random card...');
            
            // ‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏°‡∏à‡∏≤‡∏Å folder logos ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
            const logosPath = path.join(__dirname, 'game_assets', 'logos');
            const logoFiles = fs.readdirSync(logosPath).filter(file => 
                file.endsWith('.png') || file.endsWith('.jpg') || file.endsWith('.webp')
            );
            
            // ‡∏•‡∏ö .png/.jpg/.webp ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏°
            const availableGames = logoFiles.map(file => 
                file.replace(/\.(png|jpg|jpeg|webp)$/i, '')
            );
            
            if (availableGames.length === 0) {
                throw new Error('No game files found in game_assets/logos folder');
            }
            
            // ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏Å‡∏°
            const randomGame = availableGames[Math.floor(Math.random() * availableGames.length)];
            console.log(`üéØ Selected game: ${randomGame}`);
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°
            const gameData = this.cardGenerator.generateRandomGameData(randomGame);
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î
            const screenshotBuffer = await this.cardGenerator.generateCard(gameData);
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
            const timestamp = new Date().toISOString().replace(/:/g, '-');
            const filename = `auto_card_${timestamp}_${Math.floor(Math.random() * 1000)}.png`;
            const filePath = path.join(this.outputDir, filename);
            
            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
            require('fs').writeFileSync(filePath, screenshotBuffer);
            
            console.log(`üíæ Card saved: ${filePath}`);
            
            return {
                filePath: filePath,
                gameName: randomGame,
                gameData: gameData,
                filename: filename
            };
            
        } catch (error) {
            console.error('‚ùå Error generating random card:', error);
            throw error;
        }
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    async generateCard({ gameName }) {
        try {
            console.log(`üéÆ Generating card for: ${gameName}`);
            
            // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            const selectedImage = this.imageSelector.getImageByName(gameName);
            if (!selectedImage) {
                throw new Error(`Game "${gameName}" not found`);
            }
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°
            const gameData = this.cardGenerator.generateRandomGameData(
                selectedImage.fullPath, 
                selectedImage.name
            );
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î
            const screenshotBuffer = await this.cardGenerator.generateCard(gameData);
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
            const timestamp = new Date().toISOString().replace(/:/g, '-');
            const filename = `specific_card_${gameName.replace(/\s+/g, '_')}_${timestamp}.png`;
            const filePath = path.join(this.outputDir, filename);
            
            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
            require('fs').writeFileSync(filePath, screenshotBuffer);
            
            console.log(`üíæ Card saved: ${filePath}`);
            
            return {
                filePath: filePath,
                gameName: selectedImage.name,
                gameData: gameData,
                filename: filename
            };
            
        } catch (error) {
            console.error('‚ùå Error generating specific card:', error);
            throw error;
        }
    }

    async scheduleAutoSend(intervalMinutes = 30) {
        console.log(`‚è∞ Starting auto-send every ${intervalMinutes} minutes...`);
        
        const intervalMs = intervalMinutes * 60 * 1000;
        
        setInterval(async () => {
            try {
                console.log('\nüîÑ Auto-sending game card...');
                await this.generateAndSendSingleCard();
            } catch (error) {
                console.error('‚ùå Auto-send error:', error.message);
            }
        }, intervalMs);
        
        console.log('‚úÖ Auto-send scheduler started');
    }
}

// Export ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô module
module.exports = RichGameCardSystem;

// ‡∏ñ‡πâ‡∏≤‡∏£‡∏±‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
if (require.main === module) {
    const system = new RichGameCardSystem();
    
    // ‡∏≠‡πà‡∏≤‡∏ô command line arguments
    const args = process.argv.slice(2);
    const command = args[0] || 'server';
    
    (async () => {
        try {
            switch (command) {
                case 'test':
                    await system.testSystem();
                    break;
                    
                case 'single':
                    console.log('‚ùå ‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ú‡πà‡∏≤‡∏ô Web UI ‡πÅ‡∏ó‡∏ô:');
                    console.log('   1. ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: npm start');
                    console.log('   2. ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏õ‡∏ó‡∏µ‡πà: http://localhost:3000');
                    console.log('   3. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Bot Token ‡πÅ‡∏•‡∏∞ Channel ID ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Settings');
                    console.log('   4. ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö');
                    break;
                    
                case 'multiple':
                    console.log('‚ùå ‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ú‡πà‡∏≤‡∏ô Web UI ‡πÅ‡∏ó‡∏ô:');
                    console.log('   1. ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: npm start');
                    console.log('   2. ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏õ‡∏ó‡∏µ‡πà: http://localhost:3000');
                    console.log('   3. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Bot Token ‡πÅ‡∏•‡∏∞ Channel ID ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Settings');
                    console.log('   4. ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö');
                    break;
                    
                case 'auto':
                    console.log('‚ùå Auto-send mode ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
                    console.log('üí° ‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ú‡πà‡∏≤‡∏ô Web UI ‡πÅ‡∏ó‡∏ô:');
                    console.log('   1. ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: npm start');
                    console.log('   2. ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏õ‡∏ó‡∏µ‡πà: http://localhost:3000');
                    break;
                    
                case 'server':
                    console.log('üåê ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î Web Server...');
                    console.log('üí° ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏õ‡∏ó‡∏µ‡πà: http://localhost:3000');
                    // ‡πÄ‡∏£‡∏¥‡πà‡∏° Express server
                    const server = require('./server');
                    break;
                    
                default:
                    console.log(`
üéÆ Rich Game Card Generator

üí° ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ú‡πà‡∏≤‡∏ô Web UI:
   1. ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: npm start
   2. ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏õ‡∏ó‡∏µ‡πà: http://localhost:3000
   3. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Bot Token ‡πÅ‡∏•‡∏∞ Channel ID ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Settings
   4. ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö

Available commands:
  node main.js server            - Start web server (default)
  node main.js test              - Test system (requires credentials)
                    `);
                    break;
            }
        } catch (error) {
            console.error('‚ùå Application error:', error.message);
            if (command === 'server') {
                console.log('üåê Starting web server instead...');
                require('./server');
            } else {
                process.exit(1);
            }
        }
    })();
}