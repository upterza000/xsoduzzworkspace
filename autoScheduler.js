const fs = require('fs');
const path = require('path');

class AutoScheduler {
    constructor() {
        this.intervals = new Map(); // ‡πÄ‡∏Å‡πá‡∏ö interval IDs
        this.nextScheduledTime = null; // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        this.schedulerConfig = {
            isEnabled: false,
            intervalHours: 1,
            cardType: 'random', // 'random', 'specific'
            specificGame: null
        };
        this.loadConfig();
    }

    // ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
    loadConfig() {
        const configPath = path.join(__dirname, 'scheduler-config.json');
        try {
            if (fs.existsSync(configPath)) {
                const data = fs.readFileSync(configPath, 'utf8');
                this.schedulerConfig = { ...this.schedulerConfig, ...JSON.parse(data) };
                console.log('üìÖ Auto Scheduler config loaded:', this.schedulerConfig);
            }
        } catch (error) {
            console.error('‚ùå Error loading scheduler config:', error);
        }
    }

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
    saveConfig() {
        const configPath = path.join(__dirname, 'scheduler-config.json');
        try {
            fs.writeFileSync(configPath, JSON.stringify(this.schedulerConfig, null, 2));
            console.log('üíæ Auto Scheduler config saved');
        } catch (error) {
            console.error('‚ùå Error saving scheduler config:', error);
        }
    }

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    start(richGameCardSystem, telegramBot) {
        if (!richGameCardSystem || !telegramBot) {
            console.error('‚ùå Missing required systems for auto scheduler');
            return false;
        }

        if (this.intervals.has('main')) {
            console.log('‚ö†Ô∏è Auto scheduler is already running');
            return false;
        }

        if (!this.schedulerConfig.isEnabled) {
            console.log('‚ö†Ô∏è Auto scheduler is disabled');
            return false;
        }

        const intervalMs = this.schedulerConfig.intervalHours * 60 * 60 * 1000; // ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÄ‡∏õ‡πá‡∏ô milliseconds
        
        // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ + interval
        this.nextScheduledTime = new Date(Date.now() + intervalMs);
        
        console.log(`üöÄ Starting auto scheduler - sending cards every ${this.schedulerConfig.intervalHours} hours`);
        console.log(`üìÖ Next scheduled time: ${this.nextScheduledTime.toLocaleString('th-TH')}`);
        
        const intervalId = setInterval(async () => {
            try {
                await this.sendScheduledCard(richGameCardSystem, telegramBot);
                // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô
                this.nextScheduledTime = new Date(this.nextScheduledTime.getTime() + intervalMs);
                console.log(`üìÖ Next scheduled time: ${this.nextScheduledTime.toLocaleString('th-TH')}`);
            } catch (error) {
                console.error('‚ùå Error in scheduled card send:', error);
            }
        }, intervalMs);

        this.intervals.set('main', intervalId);
        
        // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (optional)
        // this.sendScheduledCard(richGameCardSystem, telegramBot);
        
        return true;
    }

    // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    stop() {
        const intervalId = this.intervals.get('main');
        if (intervalId) {
            clearInterval(intervalId);
            this.intervals.delete('main');
            this.nextScheduledTime = null; // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏ß‡∏•‡∏≤
            console.log('‚èπÔ∏è Auto scheduler stopped');
            return true;
        }
        return false;
    }

    // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤
    async sendScheduledCard(richGameCardSystem, telegramBot) {
        try {
            console.log('üì§ Sending scheduled card...');

            let cardData;
            
            if (this.schedulerConfig.cardType === 'specific' && this.schedulerConfig.specificGame) {
                // ‡∏™‡πà‡∏á‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
                cardData = await richGameCardSystem.generateCard({
                    gameName: this.schedulerConfig.specificGame
                });
                console.log(`üéÆ Generated specific game card: ${this.schedulerConfig.specificGame}`);
            } else {
                // ‡∏™‡πà‡∏á‡πÄ‡∏Å‡∏°‡∏™‡∏∏‡πà‡∏°
                cardData = await richGameCardSystem.generateRandomCard();
                console.log('üé≤ Generated random game card');
            }

            if (cardData && cardData.filePath) {
                // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á Telegram ‡∏û‡∏£‡πâ‡∏≠‡∏° Keyboard (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ä‡πÅ‡∏ô‡∏•)
                let result;
                
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ä‡πÅ‡∏ô‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if (telegramBot.channelIds && telegramBot.channelIds.length > 1) {
                    // ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ä‡πÅ‡∏ô‡∏•
                    result = await telegramBot.sendGameCardWithKeyboardToAllChannels(cardData.filePath, cardData.gameData);
                    
                    if (result && result.successCount > 0) {
                        console.log('‚úÖ Scheduled card sent successfully to multiple channels');
                        console.log(`üì± Success: ${result.successCount}/${result.totalChannels} channels`);
                        console.log(`üéÆ Game: ${cardData.gameData.name}`);
                        
                        // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ä‡πÅ‡∏ô‡∏•
                        result.results.forEach((res, idx) => {
                            if (res.success) {
                                console.log(`   ‚úÖ ${res.channelId} (Message ID: ${res.messageId})`);
                            } else {
                                console.log(`   ‚ùå ${res.channelId} - ${res.error}`);
                            }
                        });
                    } else {
                        console.error('‚ùå Failed to send scheduled card to any channel:', result);
                    }
                } else {
                    // ‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÅ‡∏ä‡πÅ‡∏ô‡∏•‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°)
                    result = await telegramBot.sendGameCardWithKeyboard(cardData.filePath, cardData.gameData);
                    
                    if (result && result.message_id) {
                        console.log('‚úÖ Scheduled card sent successfully');
                        console.log(`üì± Message ID: ${result.message_id}`);
                        console.log(`üéÆ Game: ${cardData.gameData.name}`);
                    } else {
                        console.error('‚ùå Failed to send scheduled card:', result);
                    }
                }
            } else {
                console.error('‚ùå Failed to generate card for scheduled send');
            }

        } catch (error) {
            console.error('‚ùå Error in sendScheduledCard:', error);
        }
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
    updateConfig(newConfig) {
        const wasRunning = this.isRunning();
        
        // ‡∏´‡∏¢‡∏∏‡∏î‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
        if (wasRunning) {
            this.stop();
        }

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
        this.schedulerConfig = { ...this.schedulerConfig, ...newConfig };
        this.saveConfig();

        console.log('‚öôÔ∏è Scheduler config updated:', this.schedulerConfig);

        return {
            success: true,
            message: '‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß',
            wasRunning,
            config: this.schedulerConfig
        };
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    isRunning() {
        return this.intervals.has('main');
    }

    // ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    getConfig() {
        return {
            ...this.schedulerConfig,
            isRunning: this.isRunning(),
            nextSendTime: this.nextScheduledTime ? 
                this.nextScheduledTime.toLocaleString('th-TH') : 
                null
        };
    }

    // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (manual trigger)
    async sendNow(richGameCardSystem, telegramBot) {
        if (!richGameCardSystem || !telegramBot) {
            return { success: false, message: '‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°' };
        }

        try {
            await this.sendScheduledCard(richGameCardSystem, telegramBot);
            // ‡∏ñ‡πâ‡∏≤ scheduler ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            if (this.isRunning() && this.nextScheduledTime) {
                const intervalMs = this.schedulerConfig.intervalHours * 60 * 60 * 1000;
                this.nextScheduledTime = new Date(Date.now() + intervalMs);
                console.log(`üìÖ Next scheduled time updated: ${this.nextScheduledTime.toLocaleString('th-TH')}`);
            }
            return { success: true, message: '‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏•‡πâ‡∏ß' };
        } catch (error) {
            console.error('‚ùå Error in manual send:', error);
            return { success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message };
        }
    }

    // ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó scheduler ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà
    restart(richGameCardSystem, telegramBot) {
        this.stop();
        if (this.schedulerConfig.isEnabled) {
            return this.start(richGameCardSystem, telegramBot);
        }
        return false;
    }
}

module.exports = AutoScheduler;