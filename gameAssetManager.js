const fs = require('fs');
const path = require('path');

class GameAssetManager {
    constructor() {
        this.assetsPath = './game_assets';
        this.logoPath = path.join(this.assetsPath, 'logos');
        this.backgroundPath = path.join(this.assetsPath, 'backgrounds');
        this.decorationsPath = path.join(this.assetsPath, 'decorations');
        
        // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏Å‡∏°) - ‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏°
        this.decorationFiles = [
            'BMM@2x.108098f.png',
            'BMM@2x.9e52a4e.png', 
            'GA@2x.4d0e3a2.png',
            'Thai.jpg',
            'UK.png',
            'nav_common_logo_black@2x.b4708a2.png',
            'jackpot.svg',
            'medusa.svg',
            'Pg.png'
        ];
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        this.createDirectories();
        
        // ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå
        this.logos = this.loadAssets(this.logoPath);
        this.backgrounds = this.loadAssets(this.backgroundPath);
    }

    createDirectories() {
        const dirs = [this.assetsPath, this.logoPath, this.backgroundPath, this.decorationsPath];
        dirs.forEach(dir => {
            if (!fs.existsSync(dir)) {
                fs.mkdirSync(dir, { recursive: true });
                console.log(`üìÅ Created directory: ${dir}`);
            }
        });
    }

    loadAssets(folderPath) {
        try {
            const files = fs.readdirSync(folderPath);
            return files.filter(file => {
                const ext = path.extname(file).toLowerCase();
                const isValidImageFile = ['.jpg', '.jpeg', '.png', '.webp', '.gif', '.svg'].includes(ext);
                
                // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå logos ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î
                if (folderPath === this.logoPath) {
                    const isDecorationFile = this.decorationFiles.includes(file);
                    return isValidImageFile && !isDecorationFile;
                }
                
                return isValidImageFile;
            });
        } catch (error) {
            console.log(`‚ö†Ô∏è Could not load assets from ${folderPath}: ${error.message}`);
            return [];
        }
    }

    findAssetByGameName(gameName, assetType = 'logo') {
        const assets = assetType === 'logo' ? this.logos : this.backgrounds;
        const assetPath = assetType === 'logo' ? this.logoPath : this.backgroundPath;
        
        if (assets.length === 0) {
            return null;
        }

        // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå
        const cleanGameName = this.cleanGameName(gameName);
        console.log(`üîç Looking for ${assetType} for game: "${gameName}" ‚Üí cleaned: "${cleanGameName}"`);
        
        // ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô (exact match)
        const exactMatch = this.findExactMatch(assets, cleanGameName, assetType);
        if (exactMatch) {
            console.log(`‚úÖ Exact match found: "${exactMatch}"`);
            return path.join(assetPath, exactMatch);
        }

        // ‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏°‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        let bestMatch = null;
        let bestScore = 0;

        for (const asset of assets) {
            const assetName = this.cleanAssetName(asset, assetType);
            const score = this.calculateMatchScore(cleanGameName, assetName);
            
            console.log(`  üìÑ Checking "${asset}" (cleaned: "${assetName}") ‚Üí score: ${score}`);
            
            if (score > bestScore) {
                bestScore = score;
                bestMatch = asset;
            }
        }

        if (bestMatch && bestScore > 10) {
            console.log(`‚úÖ Best match found: "${bestMatch}" (score: ${bestScore})`);
            return path.join(assetPath, bestMatch);
        } else {
            console.log(`‚ùå No good match found for "${gameName}"`);
            return null;
        }
    }

    cleanGameName(gameName) {
        // ‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏°‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î
        return gameName
            .toLowerCase()
            .replace(/['"`]/g, '') // ‡πÄ‡∏≠‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏≥‡∏û‡∏π‡∏î‡∏≠‡∏≠‡∏Å
            .replace(/[^a-z0-9\s]/g, ' ') // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
            .replace(/\s+/g, ' ') // ‡∏£‡∏ß‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
            .trim();
    }

    cleanAssetName(filename, assetType) {
        // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
        let name = path.parse(filename).name.toLowerCase();
        
        // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö background ‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏≤ "bg" ‡πÅ‡∏•‡∏∞ "background" ‡∏≠‡∏≠‡∏Å
        if (assetType === 'background') {
            name = name.replace(/\s*(bg|background)\s*$/, '').trim();
        }
        
        return name
            .replace(/['"`]/g, '')
            .replace(/[^a-z0-9\s]/g, ' ')
            .replace(/\s+/g, ' ')
            .trim();
    }

    findExactMatch(assets, gameName, assetType) {
        const gameNameLower = gameName.toLowerCase();
        
        // ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡∏ï‡∏£‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ
        const patterns = [
            gameNameLower, // ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏°‡∏ï‡∏£‡∏á‡πÜ
            gameNameLower.replace(/\s/g, ''), // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
            gameNameLower.replace(/\s/g, '-'), // ‡πÉ‡∏ä‡πâ - ‡πÅ‡∏ó‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
            gameNameLower.replace(/\s/g, '_'), // ‡πÉ‡∏ä‡πâ _ ‡πÅ‡∏ó‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
        ];

        for (const asset of assets) {
            const cleanName = this.cleanAssetName(asset, assetType);
            
            for (const pattern of patterns) {
                if (cleanName === pattern) {
                    return asset;
                }
            }
        }
        
        return null;
    }

    calculateMatchScore(gameName, assetName) {
        const gameWords = gameName.split(' ').filter(word => word.length > 0);
        const assetWords = assetName.split(/[-_\s]/).filter(word => word.length > 0);
        
        let score = 0;
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        for (const gameWord of gameWords) {
            for (const assetWord of assetWords) {
                if (gameWord === assetWord) {
                    score += 20; // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
                } else if (gameWord.includes(assetWord) && assetWord.length > 2) {
                    score += 15; // ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô
                } else if (assetWord.includes(gameWord) && gameWord.length > 2) {
                    score += 10; // ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡∏Å‡∏ß‡πà‡∏≤
                } else if (this.isSimilarWord(gameWord, assetWord)) {
                    score += 5; // ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô
                }
            }
        }
        
        return score;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏™‡∏∞‡∏Å‡∏î‡∏ú‡∏¥‡∏î‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢)
    isSimilarWord(word1, word2) {
        if (Math.abs(word1.length - word2.length) > 2) return false;
        
        let differences = 0;
        const maxLen = Math.max(word1.length, word2.length);
        
        for (let i = 0; i < maxLen; i++) {
            if (word1[i] !== word2[i]) differences++;
        }
        
        return differences <= 2; // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ 2 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
    }

    getGameAssets(gameName) {
        const logo = this.findAssetByGameName(gameName, 'logo');
        const background = this.findAssetByGameName(gameName, 'background');
        
        return {
            logo: logo,
            background: background,
            hasLogo: logo !== null,
            hasBackground: background !== null
        };
    }

    getAvailableAssets() {
        return {
            logos: this.logos.length,
            backgrounds: this.backgrounds.length,
            logoFiles: this.logos,
            backgroundFiles: this.backgrounds
        };
    }

    // Methods needed for Telegram bot
    getAllLogos() {
        return this.logos.map(logo => path.join(this.logoPath, logo));
    }

    getAllBackgrounds() {
        return this.backgrounds.map(bg => path.join(this.backgroundPath, bg));
    }

    // ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î
    getDecorationAssets() {
        try {
            const decorationDir = this.decorationsPath;
            if (!fs.existsSync(decorationDir)) {
                return [];
            }
            
            const files = fs.readdirSync(decorationDir);
            return files
                .filter(file => {
                    const ext = path.extname(file).toLowerCase();
                    return ['.jpg', '.jpeg', '.png', '.webp', '.gif', '.svg'].includes(ext);
                })
                .map(file => path.join(decorationDir, file));
        } catch (error) {
            console.log(`‚ö†Ô∏è Could not load decoration assets: ${error.message}`);
            return [];
        }
    }

    // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏°‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î)
    getGameNames() {
        return this.logos.map(logoFile => {
            return path.parse(logoFile).name; // ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ extension
        });
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
    createExampleStructure() {
        const exampleReadme = `# Game Assets Structure

## ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå

game_assets/
‚îú‚îÄ‚îÄ logos/          # ‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡πÄ‡∏Å‡∏°
‚îÇ   ‚îú‚îÄ‚îÄ Alchemy Gold.png
‚îÇ   ‚îú‚îÄ‚îÄ Medusa.png
‚îÇ   ‚îú‚îÄ‚îÄ Dead Man's Riches.png
‚îÇ   ‚îî‚îÄ‚îÄ Fortune Tiger.png
‚îî‚îÄ‚îÄ backgrounds/    # ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏Å‡∏°
    ‚îú‚îÄ‚îÄ Alchemy Gold bg.jpg
    ‚îú‚îÄ‚îÄ Medusa bg.png  
    ‚îú‚îÄ‚îÄ Dead Man's Riches bg.webp
    ‚îî‚îÄ‚îÄ Fortune Tiger bg.jpg

## ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå

### ‡πÇ‡∏•‡πÇ‡∏Å‡πâ (logos/)
- ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏°‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡πÄ‡∏Å‡∏°
- ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: "Medusa.png", "Fortune Tiger.png"

### ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á (backgrounds/)  
- ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏° + " bg" + ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏ü‡∏•‡πå
- ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: "Medusa bg.png", "Fortune Tiger bg.jpg"

## ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö
- PNG (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏•‡πÇ‡∏Å‡πâ)
- JPG/JPEG
- WebP
- GIF

## ‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
- ‡πÇ‡∏•‡πÇ‡∏Å‡πâ: 100x100px ‡∏´‡∏£‡∏∑‡∏≠ 200x200px
- ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á: 400x600px (‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡πå‡∏î)

## ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
\`\`\`javascript
const assetManager = new GameAssetManager();

// ‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏°
const assets = assetManager.getGameAssets("Medusa");
console.log(assets.logo);      // path/to/Medusa.png
console.log(assets.background); // path/to/Medusa bg.png

// ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ
const stats = assetManager.getAvailableAssets();
console.log(\`‡∏°‡∏µ‡πÇ‡∏•‡πÇ‡∏Å‡πâ \${stats.logos} ‡πÑ‡∏ü‡∏•‡πå, ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á \${stats.backgrounds} ‡πÑ‡∏ü‡∏•‡πå\`);
\`\`\`
`;
        
        const readmePath = path.join(this.assetsPath, 'README.md');
        if (!fs.existsSync(readmePath)) {
            fs.writeFileSync(readmePath, exampleReadme);
            console.log(`üìù Created example structure guide: ${readmePath}`);
        }
    }

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå
    testAssetFinding(testGames = []) {
        const defaultTests = [
            'Medusa',
            'Dead Man\'s Riches', 
            'Fortune Tiger',
            'Alchemy Gold',
            'Mahjong Ways',
            'Sweet Bonanza'
        ];

        const gamesToTest = testGames.length > 0 ? testGames : defaultTests;
        
        console.log('\nüß™ Testing asset finding...\n');
        
        for (const gameName of gamesToTest) {
            console.log(`\n--- Testing: "${gameName}" ---`);
            const assets = this.getGameAssets(gameName);
            
            console.log(`Logo: ${assets.hasLogo ? '‚úÖ' : '‚ùå'} ${assets.logo || 'Not found'}`);
            console.log(`Background: ${assets.hasBackground ? '‚úÖ' : '‚ùå'} ${assets.background || 'Not found'}`);
        }

        // ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        const stats = this.getAvailableAssets();
        console.log(`\nüìä Summary: ${stats.logos} logos, ${stats.backgrounds} backgrounds available`);
    }
}

module.exports = GameAssetManager;