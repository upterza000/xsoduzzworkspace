const sharp = require('sharp');
const fs = require('fs');
const path = require('path');

class ColorExtractor {
    constructor() {
        this.colorCache = new Map(); // Cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏î‡∏∂‡∏á‡πÅ‡∏•‡πâ‡∏ß
    }

    async extractColorsFromLogo(imagePath) {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö cache ‡∏Å‡πà‡∏≠‡∏ô
        if (this.colorCache.has(imagePath)) {
            return this.colorCache.get(imagePath);
        }

        try {
            if (!fs.existsSync(imagePath)) {
                return this.getDefaultColors();
            }

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏•‡πÇ‡∏Å‡πâ
            const isBackground = imagePath.includes('background') || imagePath.includes('bg');
            
            // ‡πÉ‡∏ä‡πâ sharp ‡πÄ‡∏û‡∏∑‡πà‡∏≠ resize ‡πÅ‡∏•‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏µ
            const resizeOptions = isBackground 
                ? { width: 200, height: 200 } // ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡∏Å‡∏ß‡πà‡∏≤
                : { width: 100, height: 100 }; // ‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å‡∏Å‡∏ß‡πà‡∏≤

            const { data, info } = await sharp(imagePath)
                .resize(resizeOptions.width, resizeOptions.height)
                .raw()
                .toBuffer({ resolveWithObject: true });

            // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏µ‡πÄ‡∏î‡πà‡∏ô
            const colors = isBackground 
                ? this.analyzeBackgroundColors(data, info)
                : this.analyzeColors(data, info);
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á gradient ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î
            const gradient = this.createGradient(colors);
            
            const result = {
                colors,
                gradient,
                cardGradient: `linear-gradient(135deg, ${colors.accent} 0%, ${colors.primary} 30%, ${colors.secondary} 70%, ${colors.lightMuted} 100%)`,
                bodyGradient: `linear-gradient(180deg, ${colors.accent} 0%, ${colors.muted} 50%, ${colors.primary} 100%)`,
                headerGradient: `linear-gradient(to top, ${this.hexToRgba(colors.accent, 0.9)}, transparent)`
            };

            // ‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô cache
            this.colorCache.set(imagePath, result);
            
            console.log(`üé® Colors extracted from ${path.basename(imagePath)}:`, colors);
            return result;

        } catch (error) {
            console.error('‚ùå Error extracting colors:', error.message);
            return this.getDefaultColors();
        }
    }

    analyzeBackgroundColors(data, info) {
        const { width, height, channels } = info;
        const colorCounts = new Map();
        
        // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á ‡πÉ‡∏´‡πâ‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á pixel ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
        const sampleStep = 3;
        
        for (let i = 0; i < data.length; i += channels * sampleStep) {
            const r = data[i];
            const g = data[i + 1];
            const b = data[i + 2];
            
            // ‡∏Ç‡πâ‡∏≤‡∏° pixel ‡∏ó‡∏µ‡πà‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™
            if (channels === 4 && data[i + 3] < 100) continue;
            
            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì HSV values
            const max = Math.max(r, g, b) / 255;
            const min = Math.min(r, g, b) / 255;
            const diff = max - min;
            const brightness = max;
            const saturation = max === 0 ? 0 : diff / max;
            
            // ‡∏´‡∏≤‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏î‡πÉ‡∏™ (saturation) ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
            if (saturation > 0.15 && brightness > 0.2 && brightness < 0.9) {
                // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏µ‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ô
                const groupedR = Math.floor(r / 15) * 15;
                const groupedG = Math.floor(g / 15) * 15;
                const groupedB = Math.floor(b / 15) * 15;
                
                const color = `rgb(${groupedR}, ${groupedG}, ${groupedB})`;
                
                // ‡πÉ‡∏´‡πâ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏™‡∏π‡∏á‡∏Å‡∏±‡∏ö‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ saturation ‡∏°‡∏≤‡∏Å
                const weight = Math.pow(saturation * 100, 2) + brightness * 50;
                colorCounts.set(color, (colorCounts.get(color) || 0) + weight);
            }
        }
        
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å
        const sortedColors = Array.from(colorCounts.entries())
            .sort(([,a], [,b]) => b - a)
            .map(([color]) => color);
        
        console.log(`üîç Found ${sortedColors.length} candidate colors:`, sortedColors.slice(0, 5));
        
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ò‡∏µ‡∏°‡∏™‡∏∏‡πà‡∏°
        if (sortedColors.length === 0) {
            console.log('‚ö†Ô∏è No vibrant colors found, using random theme');
            return this.getColorsByGameTheme();
        }
        
        // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏µ‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡∏∂‡πâ‡∏ô
        const baseColor = sortedColors[0];
        console.log(`üé® Selected base color: ${baseColor}`);
        
        const primary = this.enhanceColor(baseColor, 1.5); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏°
        const secondary = this.adjustBrightness(primary, 1.3);
        const accent = this.adjustBrightness(primary, 0.7);
        const muted = this.adjustSaturation(primary, 0.6);
        const lightMuted = this.adjustBrightness(primary, 1.6);
        const darkMuted = this.adjustBrightness(primary, 0.4);
        
        return {
            primary,
            secondary,
            accent,
            muted,
            lightMuted,
            darkMuted
        };
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡∏≠‡∏á‡∏™‡∏µ
    enhanceColor(color, factor) {
        const rgb = color.match(/rgb\((\d+),\s*(\d+),\s*(\d+)\)/);
        if (!rgb) return color;
        
        let r = parseInt(rgb[1]);
        let g = parseInt(rgb[2]);
        let b = parseInt(rgb[3]);
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏°‡πÇ‡∏î‡∏¢‡∏•‡∏î‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        const max = Math.max(r, g, b);
        const min = Math.min(r, g, b);
        
        if (max > min) {
            r = r === max ? Math.min(255, r * factor) : r * 0.8;
            g = g === max ? Math.min(255, g * factor) : g * 0.8;
            b = b === max ? Math.min(255, b * factor) : b * 0.8;
        }
        
        return `rgb(${Math.round(r)}, ${Math.round(g)}, ${Math.round(b)})`;
    }

    analyzeColors(data, info) {
        const { width, height, channels } = info;
        const colorCounts = new Map();
        
        // ‡∏ô‡∏±‡∏ö‡∏™‡∏µ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏µ ‡πÇ‡∏î‡∏¢‡∏Ç‡πâ‡∏≤‡∏°‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß/‡∏î‡∏≥/‡πÄ‡∏ó‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
        for (let i = 0; i < data.length; i += channels) {
            const r = data[i];
            const g = data[i + 1];
            const b = data[i + 2];
            
            // ‡∏Ç‡πâ‡∏≤‡∏° pixel ‡∏ó‡∏µ‡πà‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ alpha channel)
            if (channels === 4 && data[i + 3] < 128) continue;
            
            // ‡∏Ç‡πâ‡∏≤‡∏°‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß, ‡∏î‡∏≥, ‡πÄ‡∏ó‡∏≤ (‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á)
            const brightness = (r + g + b) / 3;
            const saturation = Math.abs(Math.max(r, g, b) - Math.min(r, g, b));
            
            // ‡∏Ç‡πâ‡∏≤‡∏°‡∏™‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏µ‡∏™‡∏±‡∏ô (‡πÄ‡∏ó‡∏≤) ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß/‡∏î‡∏≥
            if (saturation < 30 || brightness > 240 || brightness < 30) continue;
            
            // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏µ‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡πÜ ‡∏Å‡∏±‡∏ô
            const groupedR = Math.floor(r / 16) * 16;
            const groupedG = Math.floor(g / 16) * 16;
            const groupedB = Math.floor(b / 16) * 16;
            
            const color = `rgb(${groupedR}, ${groupedG}, ${groupedB})`;
            colorCounts.set(color, (colorCounts.get(color) || 0) + 1);
        }
        
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà
        const sortedColors = Array.from(colorCounts.entries())
            .sort(([,a], [,b]) => b - a)
            .map(([color]) => color);
        
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏µ‡∏™‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏°
        if (sortedColors.length === 0) {
            return this.getColorsByGameTheme();
        }
        
        // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏µ‡∏´‡∏•‡∏±‡∏Å
        const primary = sortedColors[0] || 'rgb(124, 58, 237)';
        const secondary = this.adjustBrightness(primary, 1.3);
        const accent = this.adjustBrightness(primary, 0.7);
        const muted = this.adjustSaturation(primary, 0.7);
        const lightMuted = this.adjustBrightness(primary, 1.6);
        const darkMuted = this.adjustBrightness(primary, 0.4);
        
        return {
            primary,
            secondary,
            accent,
            muted,
            lightMuted,
            darkMuted
        };
    }

    // ‡∏™‡∏µ‡πÄ‡∏î‡πá‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏™‡∏µ‡∏à‡∏≤‡∏Å‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡πÑ‡∏î‡πâ
    getColorsByGameTheme() {
        const themes = [
            { // ‡∏ò‡∏µ‡∏°‡πÅ‡∏î‡∏á-‡∏ó‡∏≠‡∏á (Dragon, Fire)
                primary: 'rgb(220, 38, 38)',
                secondary: 'rgb(251, 191, 36)',
                accent: 'rgb(153, 27, 27)',
                muted: 'rgb(185, 28, 28)',
                lightMuted: 'rgb(254, 202, 202)',
                darkMuted: 'rgb(69, 10, 10)'
            },
            { // ‡∏ò‡∏µ‡∏°‡∏ü‡πâ‡∏≤-‡πÄ‡∏á‡∏¥‡∏ô (Ice, Water)
                primary: 'rgb(59, 130, 246)',
                secondary: 'rgb(147, 197, 253)',
                accent: 'rgb(29, 78, 216)',
                muted: 'rgb(37, 99, 235)',
                lightMuted: 'rgb(219, 234, 254)',
                darkMuted: 'rgb(15, 23, 42)'
            },
            { // ‡∏ò‡∏µ‡∏°‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß-‡∏ó‡∏≠‡∏á (Nature, Forest)
                primary: 'rgb(34, 197, 94)',
                secondary: 'rgb(163, 230, 53)',
                accent: 'rgb(21, 128, 61)',
                muted: 'rgb(22, 163, 74)',
                lightMuted: 'rgb(187, 247, 208)',
                darkMuted: 'rgb(20, 83, 45)'
            },
            { // ‡∏ò‡∏µ‡∏°‡∏°‡πà‡∏ß‡∏á-‡∏ä‡∏°‡∏û‡∏π (Magic, Mystery)
                primary: 'rgb(147, 51, 234)',
                secondary: 'rgb(236, 72, 153)',
                accent: 'rgb(109, 40, 217)',
                muted: 'rgb(124, 58, 237)',
                lightMuted: 'rgb(243, 232, 255)',
                darkMuted: 'rgb(59, 7, 100)'
            }
        ];
        
        // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ò‡∏µ‡∏°‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
        return themes[Math.floor(Math.random() * themes.length)];
    }

    adjustBrightness(color, factor) {
        const rgb = color.match(/rgb\((\d+),\s*(\d+),\s*(\d+)\)/);
        if (!rgb) return color;
        
        const r = Math.min(255, Math.max(0, Math.round(parseInt(rgb[1]) * factor)));
        const g = Math.min(255, Math.max(0, Math.round(parseInt(rgb[2]) * factor)));
        const b = Math.min(255, Math.max(0, Math.round(parseInt(rgb[3]) * factor)));
        
        return `rgb(${r}, ${g}, ${b})`;
    }

    adjustSaturation(color, factor) {
        const rgb = color.match(/rgb\((\d+),\s*(\d+),\s*(\d+)\)/);
        if (!rgb) return color;
        
        const r = parseInt(rgb[1]);
        const g = parseInt(rgb[2]);
        const b = parseInt(rgb[3]);
        
        // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô HSL
        const max = Math.max(r, g, b) / 255;
        const min = Math.min(r, g, b) / 255;
        const diff = max - min;
        const add = max + min;
        const l = add * 0.5;
        
        let s = 0;
        if (diff !== 0) {
            s = l < 0.5 ? diff / add : diff / (2 - add);
        }
        
        // ‡∏õ‡∏£‡∏±‡∏ö saturation
        s = Math.min(1, Math.max(0, s * factor));
        
        // ‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô RGB (simplified)
        const newR = Math.round(r * (1 - s) + 128 * s);
        const newG = Math.round(g * (1 - s) + 128 * s);
        const newB = Math.round(b * (1 - s) + 128 * s);
        
        return `rgb(${newR}, ${newG}, ${newB})`;
    }

    getRgbFromSwatch(swatch) {
        if (!swatch) return null;
        const rgb = swatch.getRgb();
        return `rgb(${Math.round(rgb[0])}, ${Math.round(rgb[1])}, ${Math.round(rgb[2])})`;
    }

    createGradient(colors) {
        return {
            background: `linear-gradient(135deg, ${colors.accent}, ${colors.primary}, ${colors.secondary})`,
            rtpBar: `linear-gradient(90deg, ${colors.accent}, ${colors.primary}, ${colors.secondary})`,
            text: this.getContrastColor(colors.primary)
        };
    }

    // ‡πÅ‡∏õ‡∏•‡∏á hex ‡πÄ‡∏õ‡πá‡∏ô rgba
    hexToRgba(hex, alpha = 1) {
        if (hex.startsWith('rgb')) {
            return hex.replace('rgb(', 'rgba(').replace(')', `, ${alpha})`);
        }
        return hex;
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° (‡∏Ç‡∏≤‡∏ß/‡∏î‡∏≥)
    getContrastColor(backgroundColor) {
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô rgb format
        const rgbMatch = backgroundColor.match(/rgb\((\d+),\s*(\d+),\s*(\d+)\)/);
        if (rgbMatch) {
            const r = parseInt(rgbMatch[1]);
            const g = parseInt(rgbMatch[2]);
            const b = parseInt(rgbMatch[3]);
            
            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì luminance
            const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;
            return luminance > 0.5 ? '#000000' : '#ffffff';
        }
        
        return '#ffffff'; // default ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≤‡∏ß
    }

    getDefaultColors() {
        return {
            colors: {
                primary: '#7c3aed',
                secondary: '#a855f7',
                accent: '#4c1d95',
                muted: '#6d28d9',
                lightMuted: '#ec4899',
                darkMuted: '#1f2937'
            },
            gradient: {
                background: 'linear-gradient(135deg, #4c1d95, #7c3aed, #a855f7)',
                rtpBar: 'linear-gradient(90deg, #4c1d95, #7c3aed, #a855f7)',
                text: '#ffffff'
            },
            cardGradient: 'linear-gradient(135deg, #4c1d95 0%, #7c3aed 30%, #a855f7 70%, #ec4899 100%)',
            bodyGradient: 'linear-gradient(180deg, #4c1d95 0%, #6d28d9 50%, #7c3aed 100%)',
            headerGradient: 'linear-gradient(to top, rgba(76, 29, 149, 0.9), transparent)'
        };
    }

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏™‡∏µ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
    async testColorExtraction(logoFiles = []) {
        console.log('üß™ Testing color extraction...\n');
        
        for (const logoFile of logoFiles) {
            const colors = await this.extractColorsFromLogo(logoFile);
            console.log(`\nüìÅ File: ${path.basename(logoFile)}`);
            console.log('üé® Colors:', colors.colors);
            console.log('üåà Card Gradient:', colors.cardGradient);
        }
    }
}

module.exports = ColorExtractor;